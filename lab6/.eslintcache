[{"C:\\Users\\rusla\\IdeaProjects\\Graphics\\graphics\\lab6\\src\\index.js":"1","C:\\Users\\rusla\\IdeaProjects\\Graphics\\graphics\\lab6\\src\\reportWebVitals.js":"2","C:\\Users\\rusla\\IdeaProjects\\Graphics\\graphics\\lab6\\src\\App.js":"3","C:\\Users\\rusla\\IdeaProjects\\Graphics\\graphics\\lab6\\src\\Canvas.js":"4"},{"size":547,"mtime":1607465588751,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"6"},{"size":12380,"mtime":1607637416304,"results":"8","hashOfConfig":"6"},{"size":188,"mtime":1605468857505,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"wupxf0",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\Users\\rusla\\IdeaProjects\\Graphics\\graphics\\lab6\\src\\index.js",[],["21","22"],"C:\\Users\\rusla\\IdeaProjects\\Graphics\\graphics\\lab6\\src\\reportWebVitals.js",[],"C:\\Users\\rusla\\IdeaProjects\\Graphics\\graphics\\lab6\\src\\App.js",["23"],"import React from \"react\";\nimport './App.css';\nimport Canvas from \"./Canvas\";\nimport {Button, Card, Col, Form, Row} from \"react-bootstrap\";\n\nclass App extends React.Component {\n    canvas;\n    ctx;\n    points;\n    DEFAULT_GRID_SIZE = 40;\n\n    componentDidMount() {\n        this.canvas = document.getElementById(\"canvas\")\n        this.ctx = this.canvas.getContext(\"2d\")\n        const canvasHeight = this.canvas.height\n        this.ctx.transform(1, 0, 0, -1, 0, canvasHeight)\n\n        this.displayCoordinates()\n        this.setPoints()\n        this.drawFigure()\n    }\n\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        this.displayCoordinates()\n        this.setPoints()\n        this.move(this.points)\n        this.turn(this.points)\n        this.drawFigure()\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            gridSize: this.DEFAULT_GRID_SIZE,\n            xShift: 0,\n            yShift: 0,\n            zShift: 0,\n            pivotPointX: 300,\n            pivotPointY: 300,\n            angle: 180,\n            alpha: 0,\n            R: 100,\n            r: 50\n        };\n    }\n\n    setPoints() {\n        let R = this.state.R * (this.state.gridSize / 25)\n        let r = this.state.r * (this.state.gridSize / 25)\n        let step = 0.1\n        this.points = []\n\n        for (let i = 0; i < 2 * Math.PI; i += step) {\n            for (let j = -Math.PI; j < Math.PI; j += step) {\n                let x = (R + r * Math.cos(j)) * Math.cos(i)\n                let z = (R + r * Math.cos(j)) * Math.sin(i)\n                let y = r * Math.sin(j)\n                this.points.push({x: x, y: y, z: z})\n            }\n        }\n\n        this.shiftPoints(this.points)\n        this.makeProjection()\n    }\n\n    makeProjection() {\n        this.projPoints = [];\n        let angle = this.convertAngle(this.state.angle)\n        this.points.forEach(point => {\n            let r = point.z\n            let x0 = point.x\n            let y0 = point.y\n            let px = -0.5 * Math.cos(angle)\n            let py = -0.5 * Math.sin(angle)\n            let x = x0 + r * px\n            let y = y0 + r * py\n            point.x = x\n            point.y = y\n            point.z = r\n        });\n    }\n\n    shiftPoints(points) {\n        points.forEach(point => {\n            point.x += 400\n            point.y += 300\n        })\n    }\n\n    drawFigure() {\n        this.ctx.lineWidth = 1\n        this.ctx.strokeStyle = \"blue\"\n        for (let i = 0; i < 63; i++) {\n            this.ctx.beginPath()\n            this.ctx.moveTo(this.points[63 * i].x, this.points[63 * i].y)\n            for (let j = 0; j < 63; j++) {\n                this.ctx.lineTo(this.points[j + 63 * i].x, this.points[j + 63 * i].y)\n            }\n            this.ctx.closePath();\n            this.ctx.stroke();\n        }\n        //////////////////\n        this.ctx.lineWidth = 1\n        this.ctx.strokeStyle = \"blue\"\n\n        for (let j = 0; j < 63; j++) {\n            this.ctx.beginPath()\n            this.ctx.moveTo(this.points[63 + j].x, this.points[63 + j].y)\n\n            for (let i = 0; i < 63; i++) {\n                this.ctx.lineTo(this.points[i * 63 + j].x, this.points[i * 63 + j].y)\n            }\n\n            this.ctx.closePath();\n            this.ctx.stroke();\n        }\n\n    }\n\n    displayCoordinates() {\n        const canvasWidth = this.canvas.width;\n        const canvasHeight = this.canvas.height;\n        this.ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n        this.drawAxis()\n    }\n\n    drawAxis() {\n        const canvasWidth = this.canvas.width;\n        const canvasHeight = this.canvas.height;\n        const gridSize = parseInt(this.state.gridSize);\n        const numLinesX = Math.floor(canvasHeight / gridSize);\n        const numLinesY = Math.floor(canvasWidth / gridSize);\n\n        this.ctx.beginPath();\n        this.ctx.lineWidth = 3\n        this.ctx.strokeStyle = \"#000000\";\n        this.ctx.textAlign = \"center\";\n        this.ctx.textBaseline = \"middle\";\n        this.ctx.font = \"16px Verdana\"\n\n        this.ctx.moveTo(0.5, 0.5)\n        let angle = this.convertAngle(225)\n        let x0 = 0.5\n        let y0 = 0.5\n        let px = -0.5 * Math.cos(angle)\n        let py = -0.5 * Math.sin(angle)\n        let x = x0 + canvasWidth * px\n        let y = y0 + canvasHeight * py\n        this.ctx.lineTo(x, y)\n\n\n        this.ctx.lineTo(x, canvasHeight)\n        this.ctx.moveTo(x, y)\n        this.ctx.lineTo(canvasWidth, y)\n\n        this.ctx.stroke();\n\n        this.ctx.lineWidth = 1\n        for (let i = 0; i < numLinesY; i++) {\n            this.ctx.moveTo(x, y + gridSize * i)\n            this.ctx.lineTo(0.5, 0.5 + gridSize * i)\n        }\n\n        for (let i = 0; i < numLinesX; i++) {\n            this.ctx.moveTo(x + gridSize * i, y)\n            this.ctx.lineTo(x + gridSize * i, canvasWidth)\n\n            this.ctx.moveTo(x, y + gridSize * i)\n            this.ctx.lineTo(canvasHeight, y + gridSize * i)\n        }\n\n        for (let i = 0; i <= numLinesX; i++) {\n            this.ctx.moveTo(gridSize * i + 0.5, 0.5)\n            let x0 = gridSize * i + 0.5\n            let y0 = 0.5\n            let px = -0.5 * Math.cos(angle)\n            let py = -0.5 * Math.sin(angle)\n            let x = x0 + canvasWidth * px\n            let y = y0 + canvasHeight * py\n            this.ctx.lineTo(x, y)\n        }\n\n        for (let i = 0; i < numLinesY; i++) {\n            angle = this.convertAngle(45)\n            x0 = x + 0.5\n            y0 = y + 0.5\n            px = -Math.cos(angle)\n            py = -Math.sin(angle)\n            x = x0 + gridSize * px\n            y = y0 + gridSize * py\n            this.ctx.moveTo(x, y)\n            this.ctx.lineTo(canvasWidth + 0.5, y + 0.5)\n            this.ctx.moveTo(x, y)\n            this.ctx.lineTo(x + 0.5, canvasHeight + 0.5)\n        }\n        this.ctx.stroke();\n        this.ctx.closePath();\n    }\n\n    convertAngle(angle) {\n        return angle * Math.PI / 180\n    }\n\n    xTurn(x, y) {\n        let x0 = parseInt(this.state.pivotPointX)\n        let y0 = parseInt(this.state.pivotPointY)\n        let angle = this.convertAngle(this.state.alpha)\n        return x0 + (x - x0) * Math.cos(angle) - (y - y0) * Math.sin(angle);\n    }\n\n    yTurn(x, y) {\n        let x0 = parseInt(this.state.pivotPointX)\n        let y0 = parseInt(this.state.pivotPointY)\n        let angle = this.convertAngle(this.state.alpha)\n        return y0 + (y - y0) * Math.cos(angle) + (x - x0) * Math.sin(angle);\n    }\n\n    turn(points) {\n        this.polygon = []\n        points.forEach(command => {\n            let x = command.x\n            let y = command.y\n            command.x = this.xTurn(x, y)\n            command.y = this.yTurn(x, y)\n            this.polygon.push([command.x, command.y])\n        })\n    }\n\n    move(points) {\n        this.polygon = []\n        points.forEach(command => {\n            command.x += parseInt(this.state.xShift);\n            command.y += parseInt(this.state.yShift);\n            this.polygon.push([command.x, command.y])\n\n            command.x += parseInt(this.state.zShift);\n            command.y += parseInt(this.state.zShift);\n        })\n    }\n\n    handle = (e) => {\n        const {name, value} = e.currentTarget;\n        this.setState({\n            [name]: value\n        })\n    }\n\n\n    render() {\n        return (\n            <div className=\"mt-2\">\n                <Row>\n                    <Col sm={3}>\n                        <Card>\n                            <Card.Body className={\"mx-2\"}>\n                                <Row className=\"m-3\">\n                                    <Form.Label>Розмір клітини</Form.Label>\n                                    <Form.Control type=\"number\"\n                                                  onChange={this.handle}\n                                                  name={\"gridSize\"}\n                                                  value={this.state.gridSize}\n                                                  min={1}/>\n                                </Row>\n                                <Row className=\"m-3\">\n                                    <Form.Label>R</Form.Label>\n                                    <Form.Control type=\"number\"\n                                                  onChange={this.handle}\n                                                  name={\"R\"}\n                                                  value={this.state.R}/>\n                                </Row>\n                                <Row className=\"m-3\">\n                                    <Form.Label>r</Form.Label>\n                                    <Form.Control type=\"number\"\n                                                  onChange={this.handle}\n                                                  name={\"r\"}\n                                                  value={this.state.r}/>\n                                </Row>\n                                <Row className=\"m-3\">\n                                    <Form.Label>Кут проекції</Form.Label>\n                                    <Form.Control type={\"number\"}\n                                                  onChange={this.handle}\n                                                  name={\"angle\"}\n                                                  value={this.state.angle}/>\n                                </Row>\n                                <Row className=\"m-3\">\n                                    <Form.Label>Кут повороту</Form.Label>\n                                    <Form.Control type={\"number\"}\n                                                  min={0}\n                                                  max={360}\n                                                  onChange={this.handle}\n                                                  name={\"alpha\"}\n                                                  value={this.state.alpha}/>\n                                </Row>\n                                <Row className=\"m-3\">\n                                    <Col>\n                                        <Form.Label>Точка повороту Х</Form.Label>\n                                        <Form.Control name=\"pivotPointX\"\n                                                      type=\"number\"\n                                                      onChange={this.handle}\n                                                      value={this.state.pivotPointX}/>\n                                    </Col>\n                                    <Col>\n                                        <Form.Label>Точка повороту Y</Form.Label>\n                                        <Form.Control name=\"pivotPointY\"\n                                                      type=\"number\"\n                                                      onChange={this.handle}\n                                                      value={this.state.pivotPointY}/>\n                                    </Col>\n                                </Row>\n                                <hr/>\n                                <Row className=\"m-3\">\n                                    <Form.Label>Зсув по Х</Form.Label>\n                                    <Form.Control name=\"xShift\"\n                                                  type=\"number\"\n                                                  value={this.state.xShift}\n                                                  onChange={this.handle}/>\n\n                                    <Form.Label>Зсув по Z</Form.Label>\n                                    <Form.Control name=\"yShift\"\n                                                  type=\"number\"\n                                                  value={this.state.yShift}\n                                                  onChange={this.handle}/>\n                                    <Form.Label>Зсув по Y</Form.Label>\n                                    <Form.Control name=\"zShift\"\n                                                  type=\"number\"\n                                                  value={this.state.zShift}\n                                                  onChange={this.handle}/>\n                                </Row>\n                            </Card.Body>\n                        </Card>\n                    </Col>\n                    <Col>\n                        <Canvas/>\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","C:\\Users\\rusla\\IdeaProjects\\Graphics\\graphics\\lab6\\src\\Canvas.js",[],["24","25"],{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","severity":1,"message":"31","line":4,"column":9,"nodeType":"32","messageId":"33","endLine":4,"endColumn":15},{"ruleId":"26","replacedBy":"34"},{"ruleId":"28","replacedBy":"35"},"no-native-reassign",["36"],"no-negated-in-lhs",["37"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar",["36"],["37"],"no-global-assign","no-unsafe-negation"]